import { _decorator, Component, Node } from 'cc';
const { ccclass, property } = _decorator;

// 任务结束回调
export type TaskFinishCallback = (... args) => void;
// 任务执行回调
export type TaskCallback = (finsh:TaskFinishCallback) => void;

/**任务类 */
class TaskInfo {
    /**任务回调 */
    public task: TaskCallback;
    /**优先级 */
    public priority: number;
    /**任务描述 */
    public taskDesc: string;
    /**是否完成 */
    public isFinshed:boolean = false;
    public constructor(task: TaskCallback, priority: number, taskDesc?:string) {
        this.task = task;
        this.priority = priority;
        this.taskDesc = taskDesc ;
    }
}

/**任务队列类 */
class TaskInfoQueue {
    /**任务队列 */
    public mTaskQueue: TaskInfo[] = new Array<TaskInfo>();
    /**优先级 */
    public mPriority: number;
    /**任务队列描述 */
    public mTaskDesc: string;
    /**任务当前进度 */
    private _taskSteps:number = 0;
    /**完成回调 */
    finshTaskQueueCb:Function = null;

    public constructor(task: TaskInfo, priority: number) {
        this.mTaskQueue.push(task);
        this.mPriority = priority;
    }

    /**任务队列描述 */
    get desc(){
        return this.mTaskDesc;
    }
    
    /**优先级 */
    get priority(){
        return this.priority;
    }

    /**
     * 启动任务队列
     * @param finsh 完成回调 
     */
    executeTaskQueue(finsh:Function){
        this.finshTaskQueueCb = finsh;
        for(let i = 0; i < this.mTaskQueue.length; i ++){
            this.mTaskQueue[i].task(() => {
                this._taskSteps --;
                if(this._taskSteps < 0){
                    this.finshTaskQueueCb && this.finshTaskQueueCb();
                }
            })
        }
    }

    // pushAndExecuteTaskInfo(taskInfo:TaskInfo){
    //     // this.taskQueue.push(taskInfo);
    //     this._taskSteps ++;
    //     taskInfo.task(() => {
    //         this._taskSteps --;
    //         if(this._taskSteps < 0){
    //             this.finshTaskQueueCb && this.finshTaskQueueCb();
    //         }
    //     })
    // }

    /**
     * 追加任务
     * @param taskInfo 任务
     */
    pushTaskInfo(taskInfo:TaskInfo){
        this.mTaskQueue.push(taskInfo);
        this._taskSteps ++;
    }

    /**
     * 插入任务
     * @param taskInfo 任务
     * @param idx 位置
     */
    insertTaskInfo(taskInfo:TaskInfo, idx:number){}
}

@ccclass('TaskPipeline')
export class TaskPipeline {
    private _curTask: TaskInfoQueue = null;
    private _taskQueue: TaskInfoQueue[] = new Array<TaskInfoQueue>();

    /**
     * 追加任务
     * @param task 任务
     * @param priority 优先级 多个任务可以是相同的优先级如果优先级相同那么它们将同步执行否则按照从小到大顺序执行
     * @param desc 任务描述
     * @returns 
     */
    public pushTask(task: TaskCallback, priority: number = 0, desc:string = ""): void {
        let taskInfo = new TaskInfo(task, priority, desc);
        let idx = null;
        if (this._taskQueue.length > 0) {
            for (let i: number = this._taskQueue.length - 1; i >= 0; --i) {
                if (this._taskQueue[i].priority < priority) {
                    let taskQueue:TaskInfoQueue = new TaskInfoQueue(taskInfo, priority);
                    this._taskQueue.splice(i + 1, 0, taskQueue);
                    return;
                }
                else if(this._taskQueue[i].priority == priority){
                    this._taskQueue[i].pushTaskInfo(taskInfo)
                    return;
                }
                else if(this._curTask && this._curTask.priority == taskInfo.priority){
                    this._curTask.pushTaskInfo(taskInfo);
                    return;
                }
            }
        }
        // 插到头部
        let taskQueue:TaskInfoQueue = new TaskInfoQueue(taskInfo, priority);
        this._taskQueue.splice(0, 0, taskQueue);
    }

    /**
     * 清理任务管道
     */
    public clearTask(): void {
        this._curTask = null;
        this._taskQueue.length = 0;
    }

    /**
     * 启动任务管道流水线
     */
    public executeNextTask(): void {
        let taskInfo = this._taskQueue.shift() || null;
        this._curTask = taskInfo;
        if (taskInfo) {
            taskInfo.executeTaskQueue(() => {
                this.executeNextTask();
            })
        }
    }
}


